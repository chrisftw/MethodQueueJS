MethodQueue JS is a simple library to help limit concurrent Async calls to a method.

It is a rough draft, but other people might find it useful, so I am releasing it in it's current working state.

How to Use MethodQueue JS

Require the js file:

<script src="js/method-queue.js"></script>

In your script:

first add a custom method that you want to limit concurrency of:
MethodQueue.functionToRun = function(obj) { 
  var total = MethodQueue.curConcurrent;
  setTimeout(
    function() { // this is an Async call that takes time
      console.log("queue length when called (counting self): " + total + " object: " + obj);
      MethodQueue.end();  // Must call this method as a call back in your async method when it is done.
    }, 1000)  // sample async calls are taking 1 second to complete
  };

You can change the number of concurrent actions allowed with the maxConcurrent option:
MethodQueue.maxConcurrent = 3;

Then pre-seed your queue if you have many to run at once, or you can add them one at a time using enqueue method.

MethodQueue.queue = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110];

Start the queue:

MethodQueue.start()

Takes later inputs of methods also:

setTimeout(function(){MethodQueue.enqueue("Hello World" )}, 5000);
